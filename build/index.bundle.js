/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_commandLine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/commandLine.js */ \"./src/lib/commandLine.js\");\n\nwindow.addEventListener('load', function () {\n  new _lib_commandLine_js__WEBPACK_IMPORTED_MODULE_0__.CommandLine(document.querySelector('#console'));\n  setTitle();\n});\n\nfunction setTitle() {\n  setInterval(() => {\n    let split = document.title.split('');\n    let lastLetter = split.pop();\n    split.push(lastLetter === 'n' ? '_' : 'n');\n    document.title = split.join('');\n  }, 500);\n}\n\n//# sourceURL=webpack://personal-site/./src/index.js?");

/***/ }),

/***/ "./src/lib/commandDictionary.js":
/*!**************************************!*\
  !*** ./src/lib/commandDictionary.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"commandDictionary\": () => (/* binding */ commandDictionary)\n/* harmony export */ });\nconst commandDictionary = {\n  'help': {\n    detailedHelp: 'Run `help` at any time to see this list of available methods\\n\\\n            Run `help name` to find out more about the method `name`',\n    generalHelp: 'Run `help` at any time to see this list of available methods\\n\\\n    Run `help name` to find out more about the method `name`'\n  },\n  'clear': {\n    detailedHelp: 'Use `clear` to flush the console clean (or Command + K).',\n    generalHelp: 'Flush the console clean (or Command + K).'\n  },\n  'gui': {\n    detailedHelp: 'Use `gui` to switch from the CLI view to the GUI.',\n    generalHelp: 'Switch from the CLI view to the GUI.'\n  },\n  'curl': {\n    detailedHelp: 'Use `curl` to make a curl request to the (mandatory) URL endpoint provided.\\n\\n\\\n            Optional arguments:\\n\\\n            --method or --X to specify the request method (GET, POST)\\n\\\n            --data or -d to provide a JSON payload in your POST request (NO spaces)\\n\\n\\\n            Example:\\n\\\n            curl https://www.google.com/foo --method=POST --data={\"bar\":\"baz\",\"hello\":\"world\"}\\n\\n',\n    generalHelp: 'Make a request to the provided endpoint.'\n  },\n  'about': {\n    detailedHelp: 'Use `about` to learn more about collin.',\n    generalHelp: 'Learn more about collin.'\n  },\n  // 'resume': {\n  //   detailedHelp: 'Use `resume` to take a peak at collin\\'s resume.\\n\\\n  //           Accepts the --format argument of `browser` or `download`. Default is `browser`.',\n  //   generalHelp: 'Use `resume` to view collin\\'s resume.'\n  // },\n  'email': {\n    detailedHelp: 'Use `email` to return collin\\'s email.\\n\\\n            Accepts the --method argument of `print` to print collin\\'s email to STDOUT or `program` to compose an email in your default mail program. Default is `print`.',\n    generalHelp: 'Get collin\\'s email.'\n  },\n  'vi': {\n    detailedHelp: 'Use `vi` to open the vim editor with the file provided. \\n\\\n                    Within vi:\\n\\\n                    i = enable edit mode\\n\\\n                    : = enter command, `q` = quit, `wq` = write/save and quit\\n\\\n                    Esc = exit current mode',\n    generalHelp: 'Open the vim editor with the specified file'\n  },\n  'pwd': {\n    detailedHelp: 'Use `pwd` to print current location',\n    generalHelp: 'Print current location'\n  },\n  'ls': {\n    detailedHelp: 'Use `ls` to list other files and directories.',\n    generalHelp: 'List other files and directories.'\n  },\n  'rm': {\n    detailedHelp: 'Use `rm` to destroy the file or directory specified.',\n    generalHelp: 'Destroy the file or directory specified.'\n  },\n  'cd': {\n    detailedHelp: 'Use `cd` to change directories.',\n    generalHelp: 'Change directories.'\n  },\n  'cat': {\n    detailedHelp: 'Use `cat` to print content of the specified file.',\n    generalHelp: 'Print content of the specified file.'\n  },\n  'mkdir': {\n    detailedHelp: 'Use `mkdir` to create a new directory with a specified path.',\n    generalHelp: 'Create a new directory with a specified path.'\n  },\n  'touch': {\n    detailedHelp: 'Use `touch` to create a new file with a specified path.',\n    generalHelp: 'Create a new file with a specified path.'\n  },\n  'linkedin': {\n    detailedHelp: 'Use `linkedin` to open collin\\'s LinkedIn page in a new tab in your browser.',\n    generalHelp: 'Open collin\\'s LinkedIn page in a new tab in your browser.'\n  }\n};\n\n\n//# sourceURL=webpack://personal-site/./src/lib/commandDictionary.js?");

/***/ }),

/***/ "./src/lib/commandHistory.js":
/*!***********************************!*\
  !*** ./src/lib/commandHistory.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommandHistory\": () => (/* binding */ CommandHistory)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass CommandHistory {\n  constructor() {\n    _defineProperty(this, \"addCommandToHistory\", command => {\n      this.commandHistory.push(command);\n      localStorage.setItem('collinOSCommandHistory', JSON.stringify(this.commandHistory));\n      this.currentCommandHistoryIndex = this.commandHistory.length;\n    });\n\n    _defineProperty(this, \"tryRotateToPreviousCommand\", () => {\n      let previousCommandIndex = this.currentCommandHistoryIndex - 1;\n      let previousCommand = this.commandHistory[previousCommandIndex];\n\n      if (previousCommand) {\n        this.currentCommandHistoryIndex = previousCommandIndex;\n        return previousCommand;\n      }\n    });\n\n    _defineProperty(this, \"tryRotateToNextCommand\", () => {\n      let nextCommandIndex = this.currentCommandHistoryIndex + 1;\n      let nextCommand = this.commandHistory[this.currentCommandHistoryIndex + 1];\n\n      if (nextCommand) {\n        this.currentCommandHistoryIndex = nextCommandIndex;\n        return nextCommand;\n      } else {\n        this.currentCommandHistoryIndex = this.commandHistory.length;\n      }\n    });\n\n    this.commandHistory = JSON.parse(localStorage.getItem('collinOSCommandHistory') || '[]'), this.currentCommandHistoryIndex = this.commandHistory.length;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/commandHistory.js?");

/***/ }),

/***/ "./src/lib/commandLine.js":
/*!********************************!*\
  !*** ./src/lib/commandLine.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommandLine\": () => (/* binding */ CommandLine)\n/* harmony export */ });\n/* harmony import */ var _commandHistory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commandHistory.js */ \"./src/lib/commandHistory.js\");\n/* harmony import */ var _navigator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./navigator.js */ \"./src/lib/navigator.js\");\n/* harmony import */ var _keyHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keyHandler.js */ \"./src/lib/keyHandler.js\");\n/* harmony import */ var _methodHandler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methodHandler.js */ \"./src/lib/methodHandler.js\");\n/* harmony import */ var _vim_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vim.js */ \"./src/lib/vim.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nclass CommandLine {\n  constructor(_element) {\n    _defineProperty(this, \"setInputText\", text => {\n      this.clearCurrentLine();\n      text.split('').forEach(this.addCharacterToUserInput);\n    });\n\n    _defineProperty(this, \"addCharacterToUserInput\", character => {\n      let charEl = document.createElement('span');\n      charEl.className = 'character';\n      charEl.innerText = character;\n      this.currentLineUserInputEl.insertBefore(charEl, this.characterElementsInputted[this.currentCursorIndex + 1]);\n      this.characterElementsInputted.splice(this.currentCursorIndex + 1, 0, charEl);\n      this.currentUserInput = this.characterElementsInputted.map(el => el.innerText).join('');\n\n      this._moveCursorToPosition(this.currentCursorIndex + 1);\n    });\n\n    _defineProperty(this, \"removeCharacterInFocus\", () => {\n      let element = this.characterElementsInputted[this.currentCursorIndex];\n\n      if (element) {\n        element.remove();\n        this.characterElementsInputted.splice(this.currentCursorIndex, 1);\n        this.currentUserInput = this.characterElementsInputted.map(el => el.innerText).join('');\n        this.currentCursorIndex -= 1;\n      }\n    });\n\n    _defineProperty(this, \"clearConsole\", (clearUserInput = false) => {\n      this.userInputsContainer.innerHTML = '';\n      let userInputBeforeClear = this.currentUserInput;\n      this.newLine();\n\n      if (!clearUserInput) {\n        this.setInputText(userInputBeforeClear);\n      }\n    });\n\n    _defineProperty(this, \"tryMovingCursorForward\", () => {\n      this._moveCursorToPosition(this.currentCursorIndex + 1);\n    });\n\n    _defineProperty(this, \"tryMovingCursorBack\", () => {\n      this._moveCursorToPosition(this.currentCursorIndex - 1);\n    });\n\n    _defineProperty(this, \"addResultsLine\", message => {\n      let results = document.createElement('div');\n      results.className = 'results';\n      results.innerText = message;\n      this.currentLineEl.append(results);\n    });\n\n    _defineProperty(this, \"displayVimEditor\", file => {\n      this.vimEditor.displayEditor(file);\n      this.keyHandler.pauseListeners();\n    });\n\n    _defineProperty(this, \"hideVimEditor\", () => {\n      this.vimEditor.hideEditor();\n      this.keyHandler.resumeListeners();\n    });\n\n    _defineProperty(this, \"newLine\", () => {\n      let newLine = document.createElement('div');\n      newLine.className = 'line text';\n      let directory = document.createElement('div');\n      directory.className = 'directory';\n      directory.innerText = `CollinOS:${this.navigator.currentDirectory.path}$`;\n      newLine.append(directory);\n      let input = document.createElement('div');\n      input.className = 'user-input';\n      newLine.append(input);\n      this.currentLineEl = newLine;\n      this.currentLineUserInputEl = input;\n      this.currentUserInput = '';\n      input.appendChild(this.cursor);\n      this.userInputsContainer.append(newLine);\n      this.characterElementsInputted = [];\n      this.currentCursorIndex = -1;\n\n      this._moveHiddenInputToFocusedLine(newLine);\n    });\n\n    _defineProperty(this, \"clearCurrentLine\", () => {\n      this.characterElementsInputted.forEach(el => el.remove());\n      this.characterElementsInputted = [];\n      this.currentCursorIndex = -1;\n    });\n\n    _defineProperty(this, \"_moveCursorToPosition\", index => {\n      let begginingOfUserInputIndex = -1;\n      let endOfUserInputIndex = this.characterElementsInputted.length - 1;\n\n      if (index >= begginingOfUserInputIndex && index <= endOfUserInputIndex) {\n        let nextCharacter = this.characterElementsInputted[index + 1];\n        this.currentCursorIndex = index;\n\n        if (nextCharacter) {\n          this.currentLineUserInputEl.insertBefore(this.cursor, nextCharacter);\n        } else {\n          this.currentLineUserInputEl.append(this.cursor);\n        }\n      }\n    });\n\n    _defineProperty(this, \"_moveHiddenInputToFocusedLine\", newLine => {\n      let rect = newLine.getBoundingClientRect();\n      this.hiddenMobileInput.style.top = `${rect.top}px`;\n      window.scrollTo(0, window.innerHeight);\n    });\n\n    _defineProperty(this, \"_createCursor\", () => {\n      if (!this.cursor) {\n        this.cursor = document.createElement('div');\n        this.cursor.id = 'cursor';\n        this.cursor.className = 'blinking text';\n        this.cursor.innerText = '_';\n      }\n    });\n\n    _defineProperty(this, \"_setReloadListener\", () => {\n      window.addEventListener('beforeunload', e => {\n        (e || window.event).returnValue = \"still there?\"; // alert('are you sure you want to leave? all changes are not persistant and your changes will not be saved.')\n      });\n    });\n\n    _defineProperty(this, \"_setMobileKeyboardHelpers\", () => {\n      this.hiddenMobileInput = document.querySelector('#hidden-input-container'), this.commandLineEl.addEventListener('click', function () {\n        document.querySelector('#hidden-input').focus();\n      });\n      this.commandLineEl.click();\n    });\n\n    this.commandLineEl = _element;\n    this.userInputsContainer = this.commandLineEl.querySelector('#user-inputs-container');\n    this.vimEditorContainer = this.commandLineEl.querySelector('#vim-editor-container');\n    this.currentUserInput = '', this._createCursor();\n\n    this._setReloadListener();\n\n    this._setMobileKeyboardHelpers();\n\n    this.characterElementsInputted = [], this.currentCursorIndex = this.characterElementsInputted.length - 1;\n    this.navigator = new _navigator_js__WEBPACK_IMPORTED_MODULE_1__.Navigator(this);\n    this.newLine();\n    this.commandHistory = new _commandHistory_js__WEBPACK_IMPORTED_MODULE_0__.CommandHistory();\n    this.keyHandler = new _keyHandler_js__WEBPACK_IMPORTED_MODULE_2__.KeyHandler(this);\n    this.methodHandler = new _methodHandler_js__WEBPACK_IMPORTED_MODULE_3__.MethodHandler(this);\n    this.vimEditor = new _vim_js__WEBPACK_IMPORTED_MODULE_4__.Vim(this);\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/commandLine.js?");

/***/ }),

/***/ "./src/lib/directory.js":
/*!******************************!*\
  !*** ./src/lib/directory.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Directory\": () => (/* binding */ Directory)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass Directory {\n  constructor({\n    directories = [],\n    files = [],\n    path,\n    parentDirectory\n  }) {\n    _defineProperty(this, \"remove\", directoryWithIn => {\n      if (this._canRemove(directoryWithIn)) {\n        let newDirectories = this.parentDirectory.directories.filter(dir => dir !== this);\n        this.parentDirectory.directories = newDirectories;\n      } else {\n        throw new Error('cannot remove directory while within it.');\n      }\n    });\n\n    _defineProperty(this, \"addDirectory\", directory => {\n      this.directories = directory;\n    });\n\n    _defineProperty(this, \"addFile\", file => {\n      this.files = file;\n    });\n\n    _defineProperty(this, \"dirName\", () => {\n      return this.parsedPath()[this.parsedPath().length - 1];\n    });\n\n    _defineProperty(this, \"fileNames\", () => {\n      return this.files.map(file => file.name);\n    });\n\n    _defineProperty(this, \"findChildDirectory\", dirName => {\n      return this.directories.find(dir => dir.dirName() === dirName);\n    });\n\n    _defineProperty(this, \"childDirectoryNames\", () => {\n      return this.directories.map(dir => dir.dirName());\n    });\n\n    _defineProperty(this, \"isChildOfDirectory\", directory => {\n      if (this.parentDirectory) {\n        if (this.parentDirectory === directory) {\n          return true;\n        } else {\n          return this.parentDirectory.isChildOfDirectory(directory);\n        }\n      }\n    });\n\n    _defineProperty(this, \"getFile\", fileName => {\n      return this.files.find(file => file.name === fileName);\n    });\n\n    _defineProperty(this, \"isRoot\", () => {\n      return this.parentDirectory === undefined;\n    });\n\n    _defineProperty(this, \"parsedPath\", () => {\n      let split = this.path.split('/'); // remove the starting `/` if it's not the root dir\n\n      return this.isRoot ? split : split.shift();\n    });\n\n    _defineProperty(this, \"_canRemove\", directoryWithIn => {\n      return !this.isRoot() && !directoryWithIn.isChildOfDirectory(this);\n    });\n\n    _defineProperty(this, \"_checkValidity\", () => {\n      if (this.path.startsWith('.')) throw Error('path cannot start with `.`');\n    });\n\n    this._directories = directories;\n    this._files = files;\n    this._path = path;\n    this._parentDirectory = parentDirectory;\n\n    this._checkValidity();\n  }\n\n  get directories() {\n    return this._directories;\n  }\n\n  set directories(directoryOrDirectories) {\n    if (directoryOrDirectories.constructor.name === 'Directory') {\n      this._directories.push(directoryOrDirectories);\n    } else if (directoryOrDirectories.constructor.name === 'Array') {\n      this._directories = directoryOrDirectories;\n    }\n  }\n\n  get path() {\n    return this._path;\n  }\n\n  get files() {\n    return this._files;\n  }\n\n  set files(fileOrFiles) {\n    if (fileOrFiles.constructor.name === 'File') {\n      this._files.push(fileOrFiles);\n    } else if (fileOrFiles.constructor.name === 'Array') {\n      this._files = fileOrFiles;\n    }\n  }\n\n  get parentDirectory() {\n    return this._parentDirectory;\n  }\n\n  static parsePath(stringPath) {\n    let formatted = stringPath.startsWith('/') ? stringPath.slice(1, stringPath.length) : stringPath;\n    return formatted.split('/');\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/directory.js?");

/***/ }),

/***/ "./src/lib/file.js":
/*!*************************!*\
  !*** ./src/lib/file.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"File\": () => (/* binding */ File)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass File {\n  constructor({\n    name,\n    directory,\n    content = undefined\n  }) {\n    _defineProperty(this, \"remove\", () => {\n      let newFiles = this.directory.files.filter(file => file !== this);\n      this.directory.files = newFiles;\n    });\n\n    this._name = name;\n    this._content = content;\n    this._directory = directory;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get content() {\n    return this._content;\n  }\n\n  get directory() {\n    return this._directory;\n  }\n\n  set content(content) {\n    this._content = content;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/file.js?");

/***/ }),

/***/ "./src/lib/fileDirectoryManager.js":
/*!*****************************************!*\
  !*** ./src/lib/fileDirectoryManager.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FileDirectoryManager\": () => (/* binding */ FileDirectoryManager)\n/* harmony export */ });\n/* harmony import */ var _directory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directory.js */ \"./src/lib/directory.js\");\n/* harmony import */ var _commandDictionary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commandDictionary.js */ \"./src/lib/commandDictionary.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file.js */ \"./src/lib/file.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nclass FileDirectoryManager {\n  constructor(navigator) {\n    _defineProperty(this, \"createDirectory\", ({\n      directoryPath,\n      dontThrowErrorOnNoDirCreated = false,\n      dontSwitchBackToStartingDirectory = false\n    }) => {\n      let parsedDirectoryPath = _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory.parsePath(directoryPath);\n      let startingDirectory = this.navigator.currentDirectory;\n      let directoryCreated = false;\n      parsedDirectoryPath.forEach(dirName => {\n        let existingDir = this.navigator.getDirectory(dirName);\n\n        if (existingDir) {\n          this.navigator.currentDirectory = existingDir;\n        } else {\n          directoryCreated = true;\n          let newDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n            parentDirectory: this.navigator.currentDirectory,\n            path: [this.navigator.currentDirectory.path, dirName].join('/')\n          });\n          this.navigator.currentDirectory.addDirectory(newDir);\n          this.navigator.currentDirectory = newDir;\n        }\n      });\n      if (!dontSwitchBackToStartingDirectory) this.navigator.currentDirectory = startingDirectory;\n      if (!directoryCreated && !dontThrowErrorOnNoDirCreated) throw Error(`Directory already exists ${directoryPath}`);\n    });\n\n    _defineProperty(this, \"removeDirectory\", directoryPath => {\n      let parsedPath = _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory.parsePath(directoryPath);\n      let dirToRemove = parsedPath.pop();\n\n      if (this.reservedNames.includes(dirToRemove)) {\n        throw new Error(`cannot remove directory ${dirToRemove}`);\n      } else {\n        let directory = this.navigator.getDirectory(directoryPath);\n\n        if (directory) {\n          directory.remove();\n        } else {\n          throw new Error(`no such directory ${directoryPath}`);\n        }\n      }\n    });\n\n    _defineProperty(this, \"createFile\", filePath => {\n      let parsedFilePath = _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory.parsePath(filePath);\n      let newFileName = parsedFilePath.pop();\n      let startingDirectory = this.navigator.currentDirectory;\n\n      if (parsedFilePath.length > 0) {\n        this.createDirectory({\n          directoryPath: parsedFilePath.join('/'),\n          dontThrowErrorOnNoDirCreated: true,\n          dontSwitchBackToStartingDirectory: true\n        });\n      }\n\n      let newFile = new _file_js__WEBPACK_IMPORTED_MODULE_2__.File({\n        directory: this.navigator.currentDirectory,\n        name: newFileName\n      });\n      this.navigator.currentDirectory.addFile(newFile);\n      this.navigator.currentDirectory = startingDirectory;\n    });\n\n    this._navigator = navigator;\n    this.reservedNames = ['..', '.']; // this.reservedNames = ['..', '.'].concat(Object.keys(commandDictionary));\n  }\n\n  get navigator() {\n    return this._navigator;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/fileDirectoryManager.js?");

/***/ }),

/***/ "./src/lib/fileStructure.js":
/*!**********************************!*\
  !*** ./src/lib/fileStructure.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rootDir\": () => (/* binding */ rootDir),\n/* harmony export */   \"usersDir\": () => (/* binding */ usersDir),\n/* harmony export */   \"guestDir\": () => (/* binding */ guestDir),\n/* harmony export */   \"welcomeDir\": () => (/* binding */ welcomeDir),\n/* harmony export */   \"collinDir\": () => (/* binding */ collinDir),\n/* harmony export */   \"projectsDir\": () => (/* binding */ projectsDir)\n/* harmony export */ });\n/* harmony import */ var _directory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directory.js */ \"./src/lib/directory.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./file.js */ \"./src/lib/file.js\");\n\n\nconst rootDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n  path: '~'\n});\nconst usersDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n  path: '~/Users',\n  parentDirectory: rootDir\n});\nconst guestDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n  path: '~/Users/guest',\n  parentDirectory: usersDir\n});\nconst welcomeDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n  path: '~/Users/guest/welcome',\n  parentDirectory: guestDir\n});\nconst collinDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n  path: '~/Users/collin',\n  parentDirectory: usersDir\n});\nconst projectsDir = new _directory_js__WEBPACK_IMPORTED_MODULE_0__.Directory({\n  path: '~/Users/collin/projects',\n  parentDirectory: collinDir\n});\nconst bashProfile = new _file_js__WEBPACK_IMPORTED_MODULE_1__.File({\n  directory: rootDir,\n  name: '.bash_profile',\n  content: 'BACKGROUND=black\\nCOLOR=limegreen'\n});\nconst aboutFile = new _file_js__WEBPACK_IMPORTED_MODULE_1__.File({\n  directory: welcomeDir,\n  name: 'about.txt',\n  content: 'Hi, I\\'m Collin. Welcome to CollinOS.'\n});\nconst resumeFile = new _file_js__WEBPACK_IMPORTED_MODULE_1__.File({\n  directory: collinDir,\n  name: 'resume.txt',\n  content: 'Done did some things.'\n});\nrootDir.directories = usersDir;\nrootDir.files = bashProfile;\nusersDir.directories = [collinDir, guestDir];\ncollinDir.directories = projectsDir;\ncollinDir.files = resumeFile;\nguestDir.directories = welcomeDir;\nwelcomeDir.files = aboutFile;\n\n\n//# sourceURL=webpack://personal-site/./src/lib/fileStructure.js?");

/***/ }),

/***/ "./src/lib/keyHandler.js":
/*!*******************************!*\
  !*** ./src/lib/keyHandler.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KeyHandler\": () => (/* binding */ KeyHandler)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass KeyHandler {\n  constructor(commandLine) {\n    _defineProperty(this, \"pauseListeners\", () => {\n      this.listenersPaused = true;\n    });\n\n    _defineProperty(this, \"resumeListeners\", () => {\n      this.listenersPaused = false;\n    });\n\n    _defineProperty(this, \"handleKeydown\", keyboardEvent => {\n      if (!this.listenersPaused) {\n        let reservedKeyCodeMethod = this.keyCodeFunctionDictionary[keyboardEvent.keyCode];\n\n        if (reservedKeyCodeMethod) {\n          reservedKeyCodeMethod(keyboardEvent);\n        }\n\n        if (!this.controlKeyIsPressed && !this.commandKeyIsPressed && this.noResponseKeyCodes.indexOf(event.keyCode) === -1) {\n          this.commandLine.addCharacterToUserInput(keyboardEvent.key);\n        }\n      }\n    });\n\n    _defineProperty(this, \"checkHotKeys\", keyboardEvent => {\n      if (!this.listenersPaused) {\n        switch (keyboardEvent.keyCode) {\n          case 17:\n            this.controlKeyIsPressed = true;\n            break;\n\n          case 91:\n            this.commandKeyIsPressed = true;\n            break;\n\n          case 93:\n            this.commandKeyIsPressed = true;\n            break;\n\n          case 75:\n            if (this.commandKeyIsPressed) this.commandLine.clearConsole();\n            break;\n\n          case 67:\n            if (this.controlKeyIsPressed) this.commandLine.newLine();\n            break;\n\n          default:\n            // not a hot key\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"resetHotKeys\", keyboardEvent => {\n      if (!this.listenersPaused) {\n        if (keyboardEvent.keyCode === 17) {\n          this.controlKeyIsPressed = false;\n        } else if (keyboardEvent.keyCode === 91 || keyboardEvent.keyCode === 93) {\n          this.commandKeyIsPressed = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"pauseListeners\", () => {\n      this.listenersPaused = true;\n    });\n\n    _defineProperty(this, \"resumeListeners\", () => {\n      this.listenersPaused = false;\n    });\n\n    _defineProperty(this, \"_onBackspace\", () => {\n      this.commandLine.removeCharacterInFocus();\n    });\n\n    _defineProperty(this, \"_onUpKey\", () => {\n      let previousCommand = this.commandLine.commandHistory.tryRotateToPreviousCommand();\n\n      if (previousCommand) {\n        this.commandLine.clearCurrentLine();\n        setTimeout(() => {\n          this.commandLine.setInputText(previousCommand);\n        }, 50);\n      }\n    });\n\n    _defineProperty(this, \"_onDownKey\", () => {\n      let nextCommand = this.commandLine.commandHistory.tryRotateToNextCommand();\n\n      if (nextCommand) {\n        this.commandLine.clearCurrentLine();\n        setTimeout(() => {\n          this.commandLine.setInputText(nextCommand);\n        }, 50);\n      } else {\n        this.commandLine.setInputText('');\n      }\n    });\n\n    _defineProperty(this, \"_onLeftKey\", () => {\n      this.commandLine.tryMovingCursorBack();\n    });\n\n    _defineProperty(this, \"_onRightKey\", () => {\n      this.commandLine.tryMovingCursorForward();\n    });\n\n    _defineProperty(this, \"_onEnter\", () => {\n      this.commandLine.methodHandler.handleMethod(this.commandLine.currentUserInput);\n    });\n\n    _defineProperty(this, \"_onTab\", keyboardEvent => {\n      keyboardEvent.preventDefault();\n      let attemptedCommand = this.commandLine.currentUserInput.trim();\n      let splitUserInput = attemptedCommand.split(' ');\n      let userInputToAutoComplete = splitUserInput[splitUserInput.length - 1];\n\n      if (['ls', 'cd', 'cat', 'mkdir', 'touch', 'rm', 'vi'].includes(splitUserInput[0])) {\n        let availableDirectoriesAndFiles = this.commandLine.navigator.availableDirectoriesAndFilesForUserInput(splitUserInput[1]);\n\n        this._handleAutoCompleteResults(availableDirectoriesAndFiles, splitUserInput[0]);\n      } else {\n        let availableCommands = this.commandLine.methodHandler.availableMethods.filter(method => method.startsWith(userInputToAutoComplete));\n        let formattedCommmands = availableCommands.map(command => command + ' '); // add whitespace\n\n        this._handleAutoCompleteResults(formattedCommmands);\n      }\n    });\n\n    _defineProperty(this, \"_handleAutoCompleteResults\", (autoCompleteResults, frontCommand = null) => {\n      let attemptedCommand = this.commandLine.currentUserInput;\n\n      if (autoCompleteResults.length === 0) {\n        this.commandLine.clearCurrentLine();\n        setTimeout(() => {\n          this.commandLine.setInputText(attemptedCommand);\n        }, 50);\n      } else if (autoCompleteResults.length === 1) {\n        let autoCompleteValue = frontCommand ? `${frontCommand} ${autoCompleteResults[0]}` : autoCompleteResults[0];\n        this.commandLine.setInputText(autoCompleteValue);\n      } else {\n        this.commandLine.addResultsLine(autoCompleteResults.join('\\n'));\n        this.commandLine.newLine();\n        this.commandLine.setInputText(attemptedCommand);\n      }\n    });\n\n    this.commandLine = commandLine;\n    this.controlKeyIsPressed = false;\n    this.commandKeyIsPressed = false;\n    this.listenersPaused = false;\n    this.noResponseKeyCodes = [8, 9, 13, 20, 16, 17, 18, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 91, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124];\n    this.keyCodeFunctionDictionary = {\n      8: this._onBackspace,\n      13: this._onEnter,\n      38: this._onUpKey,\n      40: this._onDownKey,\n      37: this._onLeftKey,\n      39: this._onRightKey,\n      9: this._onTab\n    };\n    window.addEventListener('keydown', this.handleKeydown);\n    window.addEventListener('keydown', this.checkHotKeys);\n    window.addEventListener('keyup', this.resetHotKeys);\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/keyHandler.js?");

/***/ }),

/***/ "./src/lib/methodHandler.js":
/*!**********************************!*\
  !*** ./src/lib/methodHandler.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MethodHandler\": () => (/* binding */ MethodHandler)\n/* harmony export */ });\n/* harmony import */ var _commandDictionary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commandDictionary.js */ \"./src/lib/commandDictionary.js\");\n/* harmony import */ var _fileDirectoryManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fileDirectoryManager.js */ \"./src/lib/fileDirectoryManager.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass MethodHandler {\n  constructor(commandLine) {\n    _defineProperty(this, \"handleMethod\", inputtedCommand => {\n      let trimmedCommand = inputtedCommand.trim();\n\n      if (trimmedCommand === \"\") {\n        this.commandLine.newLine();\n      } else {\n        let splitCommand = trimmedCommand.split(/\\s(.+)/);\n        let commandToRun = this.commandDictionary[splitCommand[0]];\n        this.commandHistory.addCommandToHistory(trimmedCommand);\n\n        if (commandToRun) {\n          this[`_${splitCommand[0]}`](splitCommand[1]);\n        } else {\n          this._invalidCommand(trimmedCommand);\n        }\n      }\n    });\n\n    _defineProperty(this, \"_invalidCommand\", command => {\n      this._logResult(`command not found: ${command}`);\n    });\n\n    _defineProperty(this, \"_invalidArgument\", (argParam, argGiven, allowedArgs) => {\n      this._logResult(`Invalid arguments provided for ${argParam}: ${argGiven}. Available arguments are: ${allowedArgs.join(', ')}.`);\n    });\n\n    _defineProperty(this, \"_getArgumentsWithoutFlag\", argumentString => {\n      if (argumentString) {\n        return argumentString.split(' ').filter(arg => !arg.startsWith('-'));\n      }\n    });\n\n    _defineProperty(this, \"_getArgumentFlag\", (argumentString, flag) => {\n      if (argumentString) {\n        return argumentString.split(' ').find(arg => arg.trim() === flag);\n      }\n    });\n\n    _defineProperty(this, \"_getArgumentsWithoutParameter\", argumentString => {\n      if (argumentString) {\n        return argumentString.split(' ').filter(arg => !arg.includes('='));\n      }\n    });\n\n    _defineProperty(this, \"_getArgument\", (argumentString, arg) => {\n      if (argumentString) {\n        let split = argumentString.split(`${arg}=`)[1];\n\n        if (split) {\n          return split.split(/\\s|&/)[0];\n        }\n      }\n    });\n\n    _defineProperty(this, \"_help\", optionalMethod => {\n      if (optionalMethod) {\n        if (this.commandDictionary[optionalMethod]) {\n          this._logResult(this.commandDictionary[optionalMethod].detailedHelp);\n        } else {\n          this._invalidCommand(optionalMethod);\n        }\n      } else {\n        this._logResult(`Welcome to CollinOS!\\n\\\n                      A web-based command line interface.\\n\\\n                      Run \\`help\\` at any time to see this list of available methods\\n\\\n                      Run \\`help name\\` to find out more about the method \\`name\\`\\n\\n\\\n                      Basic Usage:\\n\\\n                      If you\\'d rather view the site from a GUI, use the \\`gui\\` command\\n\\\n                      Use the up and down arrows to rotate through your command history.\\n\\\n                      Use tabbing for command/file/directory autocomplete.\\n\\\n                      Control + C starts a new line\\n\\\n                      Command + K flushes the console\\n\\n\\\n                      Available commands:\\n\\\n                      gui.........................................................${this.commandDictionary.gui.generalHelp}\\n\\\n                      clear......................................................${this.commandDictionary.clear.generalHelp}\\n\\\n                      curl [url]................................................${this.commandDictionary.curl.generalHelp}\\n\\\n                      ls............................................................${this.commandDictionary.ls.generalHelp}\\n\\\n                      cd...........................................................${this.commandDictionary.cd.generalHelp}\\n\\\n                      pwd........................................................${this.commandDictionary.pwd.generalHelp}\\n\\\n                      mkdir.....................................................${this.commandDictionary.mkdir.generalHelp}\\n\\\n                      touch.....................................................${this.commandDictionary.touch.generalHelp}\\n\\\n                      rm..........................................................${this.commandDictionary.rm.generalHelp}\\n\\\n                      cat.........................................................${this.commandDictionary.cat.generalHelp}\\n\\\n                      vi...........................................................${this.commandDictionary.vi.generalHelp}\\n\\\n                      email --method=[print|program]...........${this.commandDictionary.email.generalHelp}\\n\\\n                      about....................................................${this.commandDictionary.about.generalHelp}\\n\\\n                      linkedin.................................................${this.commandDictionary.linkedin.generalHelp}\\n\\n`);\n      }\n    });\n\n    _defineProperty(this, \"_clear\", () => {\n      this.commandLine.clearConsole(true);\n    });\n\n    _defineProperty(this, \"_curl\", commandArguments => {\n      let xhr = new XMLHttpRequest();\n\n      let url = this._getArgumentsWithoutParameter(commandArguments);\n\n      xhr.addEventListener(\"load\", resp => {\n        this._logResult(resp.currentTarget.responseText);\n      });\n\n      if (!url || url.length === 0) {\n        this._logResult('No URL specified in the `curl` command. Run `curl help` for more information on the CollinOS `curl` command.');\n      } else if (url.length > 1) {\n        this._logResult('Multiple un-named arguments passed to the `curl` command. Only one un-named argument is allowed in order to specify the `url` option.');\n      } else {\n        let method = this._getArgument(commandArguments, 'X') || this._getArgument(commandArguments, 'method') || 'GET';\n\n        let data = this._getArgument(commandArguments, 'data') || this._getArgument(commandArguments, 'd');\n\n        let corsProxyUrl = 'https://proxy-server-collin.herokuapp.com/proxy';\n        let xhrUrl = `${corsProxyUrl}?url=${url[0]}&method=${method}&data=${data}`;\n        xhr.open('GET', xhrUrl);\n        xhr.send();\n      }\n    });\n\n    _defineProperty(this, \"_cd\", directory => {\n      try {\n        this.navigator.changeDirectory(directory);\n        this.commandLine.newLine();\n      } catch (e) {\n        this._logResult(`no such directory ${directory}`);\n      }\n    });\n\n    _defineProperty(this, \"_mkdir\", directoryPath => {\n      try {\n        this.fileDirectoryManager.createDirectory({\n          directoryPath: directoryPath\n        });\n        this.commandLine.newLine();\n      } catch (e) {\n        this._logResult(e.message);\n      }\n    });\n\n    _defineProperty(this, \"_rm\", args => {\n      try {\n        let fileOrDirectoryPath = this._getArgumentsWithoutFlag(args);\n\n        let directory = this.navigator.getDirectory(fileOrDirectoryPath[0]);\n\n        if (directory) {\n          let hasRecursiveflag = !!this._getArgumentFlag(args, '-rf');\n\n          if (hasRecursiveflag) {\n            directory.remove(this.navigator.currentDirectory);\n            this.commandLine.newLine();\n          } else {\n            this._logResult(`${fileOrDirectoryPath[0]} is a directory. add -rf argument to recursively destroy directory and all of its content.`);\n          }\n        } else {\n          let file = this.navigator.getFile(fileOrDirectoryPath[0]);\n\n          if (file) {\n            file.remove();\n            this.commandLine.newLine();\n          } else {\n            this._logResult(`no such file or directory: ${fileOrDirectoryPath[0]}`);\n          }\n        }\n      } catch (e) {\n        this._logResult(e.message);\n      }\n    });\n\n    _defineProperty(this, \"_touch\", filePath => {\n      try {\n        this.fileDirectoryManager.createFile(filePath);\n        this.commandLine.newLine();\n      } catch (e) {\n        this._logResult(e.message);\n      }\n    });\n\n    _defineProperty(this, \"_cat\", path => {\n      try {\n        let file = this.navigator.getFile(path);\n\n        if (file) {\n          this._logResult(file.content || '');\n        } else {\n          this._logResult(`no such file ${path}`);\n        }\n      } catch (e) {\n        this._logResult(`no such file ${path}`);\n      }\n    });\n\n    _defineProperty(this, \"_gui\", () => {\n      window.location.pathname = '/';\n    });\n\n    _defineProperty(this, \"_about\", () => {\n      this._logResult('Programmer, basketball junkie, negroni enjoyer.');\n    });\n\n    _defineProperty(this, \"_email\", methodArguments => {\n      let method = this._getArgument(methodArguments, 'method') || 'print';\n      let actions = {\n        'print': this._logResult('collin\\'s email: collinschneider3@gmail.com'),\n        'program': (() => {\n          window.location.href = 'mailto:collinschneider3@gmail.com';\n          this.commandLine.newLine();\n        })()\n      };\n      return actions[method] || this._invalidArgument('method', method, ['print', 'program']);\n    });\n\n    _defineProperty(this, \"_resume\", () => {\n      this._logResult('not yet implemented.');\n    });\n\n    _defineProperty(this, \"_pwd\", () => {\n      this._logResult(this.navigator.currentDirectory.path);\n    });\n\n    _defineProperty(this, \"_ls\", directory => {\n      this._logResult(this.navigator.listDirectoryContent(directory || '.').join('\\n'));\n    });\n\n    _defineProperty(this, \"_vi\", directoryPath => {\n      try {\n        let file = this.navigator.getFile(directoryPath);\n        this.commandLine.displayVimEditor(file);\n      } catch (e) {\n        this._logResult(e.message);\n      }\n    });\n\n    _defineProperty(this, \"_linkedin\", () => {\n      window.open('https://www.linkedin.com/in/collinschneider');\n      this.commandLine.newLine();\n    });\n\n    _defineProperty(this, \"_logResult\", (msg, options) => {\n      options = options || {};\n      this.commandLine.addResultsLine(msg);\n\n      if (!options.disableNewLine) {\n        this.commandLine.newLine();\n      }\n    });\n\n    this.commandLine = commandLine;\n    this.commandHistory = this.commandLine.commandHistory;\n    this.navigator = this.commandLine.navigator;\n    this.commandDictionary = _commandDictionary_js__WEBPACK_IMPORTED_MODULE_0__.commandDictionary;\n    this.availableMethods = Object.keys(this.commandDictionary);\n    this.fileDirectoryManager = new _fileDirectoryManager_js__WEBPACK_IMPORTED_MODULE_1__.FileDirectoryManager(this.navigator);\n\n    this._help();\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/methodHandler.js?");

/***/ }),

/***/ "./src/lib/navigator.js":
/*!******************************!*\
  !*** ./src/lib/navigator.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Navigator\": () => (/* binding */ Navigator)\n/* harmony export */ });\n/* harmony import */ var _fileStructure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fileStructure.js */ \"./src/lib/fileStructure.js\");\n/* harmony import */ var _directory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directory.js */ \"./src/lib/directory.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass Navigator {\n  constructor() {\n    _defineProperty(this, \"changeDirectory\", directoryFullPath => {\n      if (directoryFullPath !== '.') {\n        let directory = this.getDirectory(directoryFullPath);\n\n        if (directory) {\n          localStorage.setItem('currentDirectoryPath', directory.path);\n          this.currentDirectory = directory;\n        } else {\n          throw new Error(`invalid directory ${directoryFullPath}`);\n        }\n      }\n    });\n\n    _defineProperty(this, \"listDirectoryContent\", directoryFullPath => {\n      if (directoryFullPath === '.') {\n        return this._directoryContent(this.currentDirectory);\n      } else {\n        let directory = this.getDirectory(directoryFullPath);\n\n        if (directory) {\n          return this._directoryContent(directory);\n        }\n      }\n    });\n\n    _defineProperty(this, \"getFile\", filePath => {\n      let parsedFilePath = _directory_js__WEBPACK_IMPORTED_MODULE_1__.Directory.parsePath(filePath);\n      let inputtedFile = parsedFilePath.pop();\n      let directory = parsedFilePath.length > 0 ? this.getDirectory(parsedFilePath.join('/')) : this.currentDirectory;\n      return directory.getFile(inputtedFile);\n    });\n\n    _defineProperty(this, \"availableDirectoriesAndFilesForUserInput\", userInput => {\n      let parsedDirectoryPath = userInput ? _directory_js__WEBPACK_IMPORTED_MODULE_1__.Directory.parsePath(userInput) : [];\n      let userInputtedValue = parsedDirectoryPath.pop();\n      let startingDirectory = parsedDirectoryPath.length === 0 ? this.currentDirectory : this.getDirectory(parsedDirectoryPath.join('/'));\n\n      if (this._tabbedUserInputIsValidDirectory(userInputtedValue, startingDirectory)) {\n        let validInputtedDirectory = this.getDirectory(userInput);\n\n        if (validInputtedDirectory) {\n          let availableDirectoryNames = validInputtedDirectory.childDirectoryNames().concat(validInputtedDirectory.files);\n          return this._returnTabbedResults(availableDirectoryNames, userInput);\n        } else {\n          return [];\n        }\n      } else {\n        let matchingDirectories = startingDirectory.childDirectoryNames().filter(dirName => dirName.startsWith(userInputtedValue || ''));\n        let matchingFiles = startingDirectory.fileNames().filter(fileName => fileName.startsWith(userInputtedValue || ''));\n        if (userInput && userInput.startsWith('/')) parsedDirectoryPath.unshift('');\n        return this._returnTabbedResults(matchingDirectories.concat(matchingFiles), parsedDirectoryPath.join('/'));\n      }\n    });\n\n    _defineProperty(this, \"_returnTabbedResults\", (tabResults, preceedingValue) => {\n      if (tabResults.length === 1) {\n        return [[preceedingValue, tabResults[0]].join('/')];\n      } else {\n        return tabResults;\n      }\n    });\n\n    _defineProperty(this, \"_tabbedUserInputIsValidDirectory\", (userInput, currentDir) => {\n      return userInput === '..' || userInput === '~' || currentDir.childDirectoryNames().includes(userInput);\n    });\n\n    _defineProperty(this, \"getDirectory\", directoryFullPath => {\n      let directoryToStartFrom = directoryFullPath.startsWith('~') ? this.rootDirectory : this.currentDirectory;\n      return this._traverseToDirectory(_directory_js__WEBPACK_IMPORTED_MODULE_1__.Directory.parsePath(directoryFullPath), directoryToStartFrom);\n    });\n\n    _defineProperty(this, \"_traverseToDirectory\", (parsedDirectoryPathToGoTo, directoryIn) => {\n      let nextDirectoryName = parsedDirectoryPathToGoTo.shift();\n      let nextDirectory = nextDirectoryName === '~' ? this.rootDirectory : nextDirectoryName === '..' ? directoryIn.parentDirectory : directoryIn.findChildDirectory(nextDirectoryName);\n\n      if (parsedDirectoryPathToGoTo.length > 0) {\n        return this._traverseToDirectory(parsedDirectoryPathToGoTo, nextDirectory);\n      } else {\n        return nextDirectory;\n      }\n    });\n\n    _defineProperty(this, \"_directoryContent\", directory => {\n      return (directory.fileNames() || []).concat(directory.childDirectoryNames());\n    });\n\n    _defineProperty(this, \"_parsedUserInputDirectory\", stringDirectory => {\n      let formatted = stringDirectory.startsWith('/') ? stringDirectory.slice(1, stringDirectory.length) : stringDirectory;\n      return formatted.split('/');\n    });\n\n    this._rootDirectory = _fileStructure_js__WEBPACK_IMPORTED_MODULE_0__.rootDir;\n    this._currentDirectory = _fileStructure_js__WEBPACK_IMPORTED_MODULE_0__.rootDir; // this._currentDirectory = localStorage.getItem('currentDirectoryPath') ? \n    //   this.getDirectory(localStorage.getItem('currentDirectoryPath')) : collinDir;\n  }\n\n  get rootDirectory() {\n    return this._rootDirectory;\n  }\n\n  get currentDirectory() {\n    return this._currentDirectory;\n  }\n\n  set currentDirectory(directory) {\n    this._currentDirectory = directory;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/navigator.js?");

/***/ }),

/***/ "./src/lib/vim.js":
/*!************************!*\
  !*** ./src/lib/vim.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vim\": () => (/* binding */ Vim)\n/* harmony export */ });\n/* harmony import */ var _vimActionArea_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vimActionArea.js */ \"./src/lib/vimActionArea.js\");\n/* harmony import */ var _vimContentArea_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vimContentArea.js */ \"./src/lib/vimContentArea.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass Vim {\n  constructor(commandLine) {\n    _defineProperty(this, \"quit\", () => {\n      this.commandLine.hideVimEditor();\n      this.commandLine.newLine();\n    });\n\n    _defineProperty(this, \"save\", () => {\n      this.currentFile.content = this.vimContentArea.currentContent();\n      this.commandLine.hideVimEditor();\n      this.commandLine.newLine();\n    });\n\n    _defineProperty(this, \"displayEditor\", file => {\n      this.currentFile = file;\n      this.vimContentArea.setContent(file.content || '');\n\n      this._setListeners();\n\n      this.commandLine.userInputsContainer.classList.add('hidden');\n      this.vimContainer.classList.remove('hidden');\n    });\n\n    _defineProperty(this, \"hideEditor\", () => {\n      this.currentFile = undefined;\n      this.vimContentArea.clear();\n      this.vimContentArea.inActivate();\n      this.vimActionArea.clear();\n      this.vimActionArea.inActivate();\n      this.commandLine.userInputsContainer.classList.remove('hidden');\n      this.vimContainer.classList.add('hidden');\n\n      this._removeListeners();\n    });\n\n    _defineProperty(this, \"_setListeners\", () => {\n      window.addEventListener('keydown', this._handleKeyDown);\n    });\n\n    _defineProperty(this, \"_removeListeners\", () => {\n      window.removeEventListener('keydown', this._handleKeyDown);\n    });\n\n    _defineProperty(this, \"_handleKeyDown\", keyboardEvent => {\n      this._checkEscapeKey(keyboardEvent);\n\n      if (this.vimContentArea.isActive()) {\n        this.vimContentArea.handleKeydown(keyboardEvent);\n      } else if (this.vimActionArea.isActive()) {\n        this.vimActionArea.handleKeydown(keyboardEvent);\n      } else {\n        let keyFunction = {\n          'i': this._onIKeyForInsertMode,\n          ':': this._onColonKeyForActionArea\n        }[keyboardEvent.key];\n        if (keyFunction) keyFunction();\n      }\n    });\n\n    _defineProperty(this, \"_checkEscapeKey\", keyboardEvent => {\n      if (keyboardEvent.key === 'Escape') {\n        this.vimActionArea.inActivateInsertMode();\n        this.vimActionArea.inActivate();\n        this.vimContentArea.inActivate();\n        this.vimContentArea.moveCursorToEndOfContent();\n      }\n    });\n\n    _defineProperty(this, \"_onIKeyForInsertMode\", () => {\n      this.vimContentArea.activate();\n      this.vimActionArea.activateInsertMode();\n    });\n\n    _defineProperty(this, \"_onColonKeyForActionArea\", () => {\n      this.vimActionArea.enableUserInput();\n      this.vimContentArea.inActivate();\n      this.vimContentArea.hideCursor();\n    });\n\n    this._commandLine = commandLine;\n    this.vimContainer = this.commandLine.vimEditorContainer;\n    this.vimContentArea = new _vimContentArea_js__WEBPACK_IMPORTED_MODULE_1__.VimContentArea(this.vimContainer.querySelector('#vim-editor-input-area'));\n    this.vimActionArea = new _vimActionArea_js__WEBPACK_IMPORTED_MODULE_0__.VimActionArea(this, this.vimContainer.querySelector('#vim-editor-action-area'));\n    this.hideEditor();\n  }\n\n  get commandLine() {\n    return this._commandLine;\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/vim.js?");

/***/ }),

/***/ "./src/lib/vimActionArea.js":
/*!**********************************!*\
  !*** ./src/lib/vimActionArea.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VimActionArea\": () => (/* binding */ VimActionArea)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass VimActionArea {\n  constructor(vim, actionAreaEl) {\n    _defineProperty(this, \"activate\", () => {\n      this.show();\n      this.active = true;\n    });\n\n    _defineProperty(this, \"inActivate\", () => {\n      this.clear();\n      this.hide();\n      this.active = false;\n    });\n\n    _defineProperty(this, \"isActive\", () => {\n      return this.active;\n    });\n\n    _defineProperty(this, \"show\", () => {\n      this.actionArea.classList.remove('hidden');\n    });\n\n    _defineProperty(this, \"hide\", () => {\n      this.actionArea.classList.add('hidden');\n    });\n\n    _defineProperty(this, \"activateInsertMode\", () => {\n      '- INSERT -'.split('').forEach(this.addCharacter);\n      this.hideCursor();\n      this.show();\n    });\n\n    _defineProperty(this, \"inActivateInsertMode\", () => {\n      this.actionArea.innerHTML = '';\n      this.hide();\n    });\n\n    _defineProperty(this, \"handleKeydown\", keyboardEvent => {\n      let keyFunction = {\n        'ArrowLeft': this._moveCursorLeft,\n        'ArrowRight': this._moveCursorRight,\n        'Backspace': this._onBackspace,\n        'Enter': this._onEnter\n      }[keyboardEvent.key];\n      if (keyFunction) keyFunction();\n\n      if (!this.noResponseKeyCodes.includes(keyboardEvent.keyCode)) {\n        this.addCharacter(keyboardEvent.key);\n        this.currentCommand += keyboardEvent.key;\n      }\n    });\n\n    _defineProperty(this, \"moveCursor\", index => {\n      let safeIndex = index < 0 ? 0 : index;\n      let characterElToPutCursorInFrontOf = this.characterElements[safeIndex];\n\n      if (characterElToPutCursorInFrontOf) {\n        this.cursorIndex = safeIndex;\n        this.actionArea.insertBefore(this.cursor, characterElToPutCursorInFrontOf);\n      } else {\n        this.cursorIndex = this.characterElements.length;\n        this.actionArea.append(this.cursor);\n      }\n    });\n\n    _defineProperty(this, \"hideCursor\", () => {\n      this.cursor.classList.add('hidden');\n    });\n\n    _defineProperty(this, \"showCursor\", () => {\n      this.cursor.classList.remove('hidden');\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.actionArea.innerHTML = '';\n      this.cursor = undefined;\n      this.currentCommand = '';\n      this.characterElements = [];\n\n      this._createCursor();\n    });\n\n    _defineProperty(this, \"enableUserInput\", () => {\n      this.clear();\n      this.addCharacter(':');\n      this.activate();\n    });\n\n    _defineProperty(this, \"addCharacter\", character => {\n      let el = document.createElement('span');\n      el.className = 'text character';\n      el.innerText = character;\n      let elToInsertBefore = this.characterElements[this.cursorIndex + 1] || this.cursor;\n      this.characterElements.splice(this.cursorIndex + 1, 0, el);\n      this.actionArea.insertBefore(el, elToInsertBefore);\n      this.cursorIndex += 1;\n    });\n\n    _defineProperty(this, \"_onEnter\", () => {\n      let command = {\n        'q': this.vim.quit,\n        'wq': this.vim.save\n      }[this.currentCommand];\n\n      if (command) {\n        command();\n      } else {\n        this._displayError(`Invalid command: ${this.currentCommand}. Valid commands are \\`q\\`(quit) and \\`wq\\`(write & quit)`);\n      }\n    });\n\n    _defineProperty(this, \"_displayError\", msg => {\n      this.clear();\n      msg.split('').forEach(this.addCharacter);\n    });\n\n    _defineProperty(this, \"_onBackspace\", () => {\n      let characterElement = this.characterElements[this.cursorIndex - 1];\n\n      if (characterElement) {\n        characterElement.remove();\n        this.characterElements.splice(this.cursorIndex - 1, 1);\n        this.cursorIndex -= 1;\n\n        if (this.characterElements.length === 0) {\n          this.inActivate();\n        }\n      }\n    });\n\n    _defineProperty(this, \"_moveCursorLeft\", () => {\n      this.moveCursor(this.cursorIndex - 1);\n    });\n\n    _defineProperty(this, \"_moveCursorRight\", () => {\n      this.moveCursor(this.cursorIndex + 1);\n    });\n\n    _defineProperty(this, \"_createCursor\", () => {\n      if (!this.cursor) {\n        this.cursor = document.createElement('span');\n        this.cursor.id = 'vim-action-area-cursor';\n        this.cursor.className = 'blinking text';\n        this.cursor.innerText = '_';\n        this.actionArea.append(this.cursor);\n        this.cursorIndex = 0;\n      }\n    });\n\n    this.actionArea = actionAreaEl;\n    this.vim = vim;\n    this.characterElements = [];\n    this.currentCommand = '';\n    this.noResponseKeyCodes = [8, 9, 13, 20, 16, 17, 18, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 91, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124];\n\n    this._createCursor();\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/vimActionArea.js?");

/***/ }),

/***/ "./src/lib/vimContentArea.js":
/*!***********************************!*\
  !*** ./src/lib/vimContentArea.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VimContentArea\": () => (/* binding */ VimContentArea)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass VimContentArea {\n  constructor(contentAreaEl) {\n    _defineProperty(this, \"activate\", () => {\n      this.active = true;\n    });\n\n    _defineProperty(this, \"inActivate\", () => {\n      this.active = false;\n    });\n\n    _defineProperty(this, \"isActive\", () => {\n      return this.active;\n    });\n\n    _defineProperty(this, \"showCursor\", () => {\n      this.cursor.classList.remove('hidden');\n    });\n\n    _defineProperty(this, \"hideCursor\", () => {\n      this.cursor.classList.add('hidden');\n    });\n\n    _defineProperty(this, \"handleKeydown\", keyboardEvent => {\n      let reservedKeyFunction = {\n        'Escape': this._onEscapeKey,\n        'ArrowLeft': this._onLeftKey,\n        'ArrowRight': this._onRightKey,\n        'Backspace': this._onBackspace,\n        'Enter': this._onEnterKey\n      }[keyboardEvent.key];\n      if (reservedKeyFunction) reservedKeyFunction();\n\n      if (!this.noResponseKeyCodes.includes(keyboardEvent.keyCode)) {\n        this.addCharacter(keyboardEvent.key);\n      }\n    });\n\n    _defineProperty(this, \"clear\", () => {\n      this.contentArea.innerHTML = '';\n      this.cursor = undefined;\n      this.characterElements = [];\n\n      this._createCursor();\n    });\n\n    _defineProperty(this, \"setContent\", content => {\n      content.split('').forEach(this.addCharacter);\n    });\n\n    _defineProperty(this, \"currentContent\", () => {\n      return this.characterElements.map(el => el.innerText).join('');\n    });\n\n    _defineProperty(this, \"moveCursor\", index => {\n      let characterElToPutCursorInFrontOf = this.characterElements[index < 0 ? 0 : index];\n\n      if (characterElToPutCursorInFrontOf) {\n        this.cursorIndex = index;\n        this.contentArea.insertBefore(this.cursor, characterElToPutCursorInFrontOf);\n      } else {\n        this.cursorIndex = this.characterElements.length;\n        this.contentArea.append(this.cursor);\n      }\n\n      this.showCursor();\n    });\n\n    _defineProperty(this, \"moveCursorToEndOfContent\", () => {\n      this.moveCursor(this.characterElements.length);\n    });\n\n    _defineProperty(this, \"addCharacter\", character => {\n      let el = document.createElement('span');\n      el.className = 'text character';\n      el.innerText = character;\n      this.characterElements.splice(this.cursorIndex, 0, el);\n      this.contentArea.insertBefore(el, this.cursor);\n      this.cursorIndex += 1;\n    });\n\n    _defineProperty(this, \"_onLeftKey\", () => {\n      this.moveCursor(this.cursorIndex - 1);\n    });\n\n    _defineProperty(this, \"_onRightKey\", () => {\n      this.moveCursor(this.cursorIndex + 1);\n    });\n\n    _defineProperty(this, \"_onEnterKey\", () => {\n      this.addCharacter('\\n');\n    });\n\n    _defineProperty(this, \"_onBackspace\", () => {\n      let characterElement = this.characterElements[this.cursorIndex - 1];\n\n      if (characterElement) {\n        characterElement.remove();\n        this.characterElements.splice(this.cursorIndex - 1, 1);\n        this.cursorIndex -= 1;\n      }\n    });\n\n    _defineProperty(this, \"_createCursor\", () => {\n      if (!this.cursor) {\n        this.cursor = document.createElement('span');\n        this.cursor.id = 'vim-content-area-cursor';\n        this.cursor.className = 'blinking text';\n        this.cursor.innerText = '_';\n        this.contentArea.append(this.cursor);\n        this.cursorIndex = 0;\n      }\n    });\n\n    this.contentArea = contentAreaEl;\n    this.characterElements = [];\n    this.noResponseKeyCodes = [8, 9, 13, 20, 16, 17, 18, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 91, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124];\n\n    this._createCursor();\n  }\n\n}\n\n\n\n//# sourceURL=webpack://personal-site/./src/lib/vimContentArea.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;